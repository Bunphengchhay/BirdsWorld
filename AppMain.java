package org.csc133.cn1.example.birdanimi;
import static com.codename1.ui.CN.*;
import com.codename1.charts.util.ColorUtil;
import com.codename1.ui.*;
import com.codename1.ui.Dialog;
import com.codename1.ui.Font;
import com.codename1.ui.Graphics;
import com.codename1.ui.geom.Point;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import java.util.Random;
import java.util.concurrent.CopyOnWriteArrayList;
import com.codename1.ui.util.UITimer;


/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class AppMain {

    private Form current;
    private Resources theme;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });        
    }
    
    public void start() {
        if(current != null){
            current.show();
            return;
        }
        new Game().show();
    }

    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }
    
    public void destroy() {
    }

}
class Game extends Form implements Runnable{
    BirdWorld bw;

    public Game(){
        bw = new BirdWorld();
        UITimer timer = new UITimer(this);
        timer.schedule(20, true, this); // refresh rate on the screen

    }

    public void paint(Graphics g){
        super.paint(g);
        bw.draw(g);
    }

    @Override
    public void run() {
        bw.tick();
        repaint();
    }
}
////--------------------------------------------------------------------------------------------
class BirdWorld{
    private int ticks;
    private Sky sky;
    private Cloud cloud;
    private Ground ground;
    private Pond pond;
    private CopyOnWriteArrayList<RainDrop> rain ;
    private CopyOnWriteArrayList<Bird> birds;

    public BirdWorld(){
        ticks = 0;
        sky = new Sky();
        cloud = new Cloud();
        ground = new Ground();
        pond = new Pond(ground);                    // Technical Debt parameter
        ground.makeRoomForPond(pond);
        rain = new CopyOnWriteArrayList<>();
        birds = new CopyOnWriteArrayList<>();
    }
    void draw(Graphics g){
        sky.draw(g);
        for(RainDrop drop : rain)
            drop.draw(g);
        cloud.draw(g);
        ground.draw(g);
        pond.draw(g);

        for(Bird bird : birds){
            bird.draw(g);
        }
        g.setColor(ColorUtil.WHITE);
        g.setFont(Font.createSystemFont(FACE_MONOSPACE, STYLE_BOLD, SIZE_LARGE));
        g.drawString(":" + rain.size() + ":" + birds.size(),
                100, Display.getInstance().getDisplayHeight()-100);
    }
    void tick(){
        ticks++;
        rain.add(new RainDrop());

        for(RainDrop drop: rain) {
            drop.fall();
            if(pond.isDropInPond(drop)){
                pond.addRainDrop(drop);
            }
             if(ground.isStuckBy(drop)){
                rain.remove(drop);
            }
        }

        //if(pond.isPondFullEnoughForBirds() && new Random().nextInt(6) < 2){
        if(pond.isPondFullEnoughForBirds() && ticks%5 == 0){
            birds.add(new Bird());
        }
        for(Bird bird : birds){
            bird.move();
            if(bird.hasFlownAway()){
                birds.remove(bird);
            }
        }

    }
}
////--------------------------------------------------------------------------------------------
class Sky{
    void draw(Graphics g){
        g.setColor(ColorUtil.LTGRAY);
        g.fillRect(0,0,Display.getInstance().getDisplayWidth(),
                Display.getInstance().getDisplayHeight());
    }
}
////--------------------------------------------------------------------------------------------
//// uh oh! Technical debt
//// clean up the code!!!
class Cloud{
    void draw(Graphics g){
        g.setColor(ColorUtil.WHITE);
        g.fillArc(0,-200, Display.getInstance().getDisplayWidth(),
                400, 180, 180);
    }
}
////--------------------------------------------------------------------------------------------
class Ground{
    private int baseGroundLevel;
    private int [] groundLevel;
    public Ground(){
        baseGroundLevel = Display.getInstance().getDisplayHeight()-300;
        groundLevel = new int [Display.getInstance().getDisplayWidth()];
        for (int i = 0; i<Display.getInstance().getDisplayWidth(); i++){
            groundLevel[i] = baseGroundLevel;
        }
    }
    int getGroundLevel() {
        return baseGroundLevel;
    }
    void makeRoomForPond(Pond pond){
        // reset the coordinate of the pond to the groundLevel
        for(int i=pond.getLocation().getX(); i<pond.getLocation().getX() + pond.getWidth(); i++){
            groundLevel[i] += pond.getDepth();
        }
    }
    void draw(Graphics g){
        g.setColor(ColorUtil.rgb(140,70,20));
        for(int i = 0; i<Display.getInstance().getDisplayWidth(); i++){
            g.drawLine(i,Display.getInstance().getDisplayHeight(), i, groundLevel[i]);
        }
    }

    public boolean isStuckBy(RainDrop drop) {
        return drop.getLocation().getY() > groundLevel[drop.getLocation().getX()];
    }
}

class RainDrop{
    private Point location;
    private int size;
    private int speed;

    public RainDrop(){
        Random r = new Random();
        location = new Point(r.nextInt(Display.getInstance().getDisplayWidth()), 0);
        size = 15 + r.nextInt(25);  // minumum of size 15 to 14+40 = 55 pixel
        speed = 40 + r.nextInt(15);
    }
    void fall(){
        location.setY(location.getY()+speed);  // move downward with whatever the speed is
    }
    void draw(Graphics g){
        g.setColor(ColorUtil.BLUE);
        g.fillArc(location.getX(),location.getY(), size, size, 0, 360);
    }
    int getArea(){
        return (int) (size* Math.PI);
    }

    Point getLocation(){
        return location;
    }
}
////--------------------------------------------------------------------------------------------
class Pond{

    private Point location;
    private int width;
    private int depth;
    private int waterInPond;

    public Pond(Ground ground){
        width = 500;
        depth = 200;
        location = new Point(Display.getInstance().getDisplayWidth()/2-width/2,
                    ground.getGroundLevel());
    }
    private int getWaterLevel(){
        return Math.min(waterInPond/width, depth);
    }
    Point getLocation() {
        return location;
    }
    int getWidth(){
        return width;
    }
    int getDepth() {
        return depth;
    }
    boolean isDropInPond(RainDrop drop){
        return drop.getLocation().getX() > location.getX() &&
                drop.getLocation().getX() < location.getX() + width &&
                drop.getLocation().getY() > location.getY() &&
                drop.getLocation().getY() < location.getY() + depth;
    }
    void addRainDrop(RainDrop drop){
        waterInPond += drop.getArea();
    }

    public boolean isPondFullEnoughForBirds() {
        return getWaterLevel() > (int)(0.8*depth);
    }


    void draw(Graphics g){
        g.setColor(ColorUtil.BLUE);
        g.fillRect(location.getX(),location.getY()+depth-getWaterLevel(),width,getWaterLevel());
    }
}

class Bird{
    private Point location;
    private int size;
    private int speed;

    public Bird(){
        Random r = new Random();
        size = 50+r.nextInt(150);
        speed =  5 + r.nextInt(40);
        location = new Point(-size, 500 + r.nextInt(1000));
    }
    void move() {
        location.setX(location.getX()+speed);
    }
    boolean hasFlownAway(){
        return (location.getX() - size) > Display.getInstance().getDisplayWidth();
    }
    void draw(Graphics g){
        g.setColor(ColorUtil.rgb(255,0,0));
        g.drawLine(location.getX(), location.getY(), location.getX()-size, location.getY()-size);
        g.drawLine(location.getX(),location.getY(), location.getX()+size, location.getY()-size);
    }
}
